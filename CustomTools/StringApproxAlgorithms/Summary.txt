We can use 4 algorithms:
1. BK-Tree (Buchard-Keller, widely use, due to the historical reasons)
2. SymSpell (the fastest, but use much memory) - free to use, SymSpell NuGet package!
3. LinSpell (much faster then BK-Tree with the same memory consumption and slower then SymSpell)
4. Norvig (worst, dont use it)

Use SymSpell, if speed is important. It is 2–3 orders of magnitude faster than BK-Tree and 5–6 orders of magnitude faster than Norvig’s algorithm. 
SymSpell lookup time grows only moderate with dictionary size and maximum edit distance. It outperforms all other three algorithms in all cases, often by several orders of magnitude. This comes at the cost of higher memory consumption and precalculation times. Precalculation times incur only once during program/server start or even only during program development if the precalculated data is serialized/deserialized.

Use LinSpell, if memory usage is important. It is 10* faster than BK-Tree for same memory usage. LinSpell lookup time grows linearly with the size of the dictionary, but is nearly independent from the maximum edit distance. It is almost always better than BK-tree and Norvig’s algorithm. No additional memory consumption and precalculation times incur.


LinSpell:
https://github.com/wolfgarbe/LinSpell

SymSpell:
https://github.com/wolfgarbe/symspell