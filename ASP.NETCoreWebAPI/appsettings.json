{
  //Log configuration. We use serilog. Read more at
  //https://github.com/serilog/serilog-settings-configuration.
  "Serilog": {
    "Using": [ "Serilog.Sinks.Console", "Serilog.Sinks.File", "Serilog.Sinks.Seq" ], //Where we want to write logs to (multiple locations at the same time can be done)
    "MinimumLevel": "Information", //determines the minimum level of logs being stored like "warning". Can be overridden in the seq sever for respective apiKey
    //Where do we want to write our logs to? Choose from a large number of sinks:
    //https://github.com/serilog/serilog/wiki/Provided-Sinks.
    "WriteTo": [ //Additional information for different type of loggers
      {
        "Name": "Console" //logging to console
      },
      {
        "Name": "File",
        "Args": {
          "path": "Logging/Logs/log.txt",
          "outputTemplate": "{Timestamp:G} {Message}{NewLine:1}{Exception:1}" //can change the template of the logs to the console (can remove this also)
        } //Logging to file, specify path and optionally outputTemplate
      },
      {
        "Name": "File",
        "Args": {
          "path": "Logging/Logs/log.json",
          "formatter": "Serilog.Formatting.Json.JsonFormatter, Serilog"
        } //Logging to file in the json format, specify path and formatter. Open the json file for example by vsc and right click "format document"
      },
      {
        "Name": "Seq",
        "Args": {
          "serverUrl": "http://localhost:5341", //can connect to the seq container
          "apiKey": "ylKtPFP5PUxIiIxfT0RN" //An apiKey, specified at seq server to distinguish the applications
        }
      } //Best way is to use Docker for the seq server. Here the Docker topic is not covered (Go to: DockerSeqUniversity)
    ],
    "Enrich": [ "FromLogContext", "WithMachineName", "WithProcessId", "WithThreadId" ], //Additional informations: to include them, we need to install NuGets: Serilog.Enrichers.Process, Serilog.Enrichers.Thread, Serilog.Enrichers.Environment
    "Properties": {
      "Application": "ASP.NETCoreWebAPI" //if the apiKey is correct, this will be overridden by the name specified in the seq server for respective apiKey (CsharpUniversity for this example)
    }
  },
  "AllowedOrigins": "*",
  "Authentication": {
    "JwtKey": "PRIVATE_KEY_DONT_SHARE",
    "JwtExpireDayes": 15,
    "JwtIssuer": "http://CsharpUniversityWebApi.com"
  },
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\MSSQLLocalDB;Database=CsharpUniversity;Trusted_Connection=True"
  },
  "HealthChecks-UI": {
    "HealthChecks": [
      {
        "Name": "Service One: WebApi",
        "Uri": "/health" //this is what url the dashboard use, so the endpoint mapped in the program.cs
      }
    ],
    "EvaluationTimeInSeconds": 30, //every 30 second the check is done. It can be like every 1h or 5 seconds if needed.
    "MinimumSecondsBetweenFailureNotifications": 60
  },
  "GitHub": {
    "ApiBaseUrl": "https://api.github.com/"
  },
  "AllowedHosts": "*" //We could write like "http://localhost:8080" or other. This is for CORS policy
}