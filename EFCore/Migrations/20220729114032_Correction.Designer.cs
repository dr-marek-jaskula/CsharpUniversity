// <auto-generated />
using System;
using EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220729114032_Correction")]
    partial class Correction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFCore.Data_models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte?>("Building")
                        .HasColumnType("TINYINT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte?>("Flat")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("INT");

                    b.Property<short?>("CustomerId")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("DATE");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte?>("ShopId")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(10)")
                        .HasDefaultValue("Received")
                        .HasComment("Received, InProgress, Done or Rejected");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopId");

                    b.HasIndex(new[] { "Deadline", "Status" }, "IX_Order_Deadline_Status")
                        .HasFilter("Status IN ('Received', 'InProgress')");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deadline", "Status" }, "IX_Order_Deadline_Status"), new[] { "Amount", "ProductId" });

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("DATE");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Received, InProgress, Done or Rejected");

                    b.Property<decimal>("Total")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Deadline", "Status" }, "IX_Payment_Deadline_Status")
                        .HasFilter("Status <> 'Rejected'");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Deadline", "Status" }, "IX_Payment_Deadline_Status"), new[] { "Total" });

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Person", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("VARCHAR(7)")
                        .HasComment("Male, Female or Unknown");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "IX_Person_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UX_Person_Email")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Email" }, "UX_Person_Email"), new[] { "FirstName", "LastName" });

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Product_Amount", b =>
                {
                    b.Property<byte>("ShopId")
                        .HasColumnType("TINYINT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("INT");

                    b.HasKey("ShopId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Amount", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Product_Tag", b =>
                {
                    b.Property<short>("TagId")
                        .HasColumnType("SMALLINT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Tag", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<short?>("EmployeeId")
                        .HasColumnType("SMALLINT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte>("Stars")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Role", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(13)")
                        .HasDefaultValue("Customer")
                        .HasComment("Customer, Employee, Manager, Administrator");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("EFCore.Data_models.Salary", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<int>("BaseSalary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0);

                    b.Property<int>("DiscretionaryBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0);

                    b.Property<int>("IncentiveBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0);

                    b.Property<int>("TaskBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Salary", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Salary_Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATE");

                    b.Property<bool>("IsDiscretionaryBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsIncentiveBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTaskBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<short?>("SalaryId")
                        .HasColumnType("SMALLINT");

                    b.HasKey("Id");

                    b.HasIndex("SalaryId");

                    b.ToTable("Salary_Transfer", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Shop", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("Shop", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Tag", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("SMALLINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("ProductTag")
                        .IsRequired()
                        .HasColumnType("VARCHAR(9)");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("NCHAR(514)");

                    b.Property<short?>("PersonId")
                        .HasColumnType("SMALLINT");

                    b.Property<byte>("RoleId")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "IX_User_Username")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "Username" }, "IX_User_Username"), new[] { "Email" });

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Views.EmployeeContactData", b =>
                {
                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("View_EmployeeContactData");
                });

            modelBuilder.Entity("EFCore.Data_models.WorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(600)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(10)")
                        .HasDefaultValue("Received")
                        .HasComment("Received, InProgress, Done or Rejected");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)");

                    b.HasKey("Id");

                    b.ToTable("WorkItem", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("WorkItem");
                });

            modelBuilder.Entity("EFCore.Data_models.Customer", b =>
                {
                    b.HasBaseType("EFCore.Data_models.Person");

                    b.Property<short?>("EmployeeId")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(8)")
                        .HasDefaultValue("Standard");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Employee", b =>
                {
                    b.HasBaseType("EFCore.Data_models.Person");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("DATE");

                    b.Property<short?>("ManagerId")
                        .HasColumnType("SMALLINT");

                    b.Property<short?>("SalaryId")
                        .HasColumnType("SMALLINT");

                    b.Property<byte?>("ShopId")
                        .HasColumnType("TINYINT");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SalaryId")
                        .IsUnique()
                        .HasFilter("[SalaryId] IS NOT NULL");

                    b.HasIndex("ShopId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("EFCore.Data_models.Issue", b =>
                {
                    b.HasBaseType("EFCore.Data_models.WorkItem");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(6,2)");

                    b.HasDiscriminator().HasValue("Issue");
                });

            modelBuilder.Entity("EFCore.Data_models.Project", b =>
                {
                    b.HasBaseType("EFCore.Data_models.WorkItem");

                    b.Property<short>("ProjectLeaderId")
                        .HasColumnType("SMALLINT");

                    b.HasIndex("ProjectLeaderId")
                        .IsUnique()
                        .HasFilter("[ProjectLeaderId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Project");
                });

            modelBuilder.Entity("EFCore.Data_models.WorkTask", b =>
                {
                    b.HasBaseType("EFCore.Data_models.WorkItem");

                    b.Property<short?>("EmployeeId")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("EndDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime?>("StartDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("WorkTask");
                });

            modelBuilder.Entity("EFCore.Data_models.Address", b =>
                {
                    b.OwnsOne("EFCore.Data_models.Owned.Coordinate", "Coordinate", b1 =>
                        {
                            b1.Property<int>("AddressId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("Latitude")
                                .HasPrecision(18, 7)
                                .HasColumnType("decimal(18,7)")
                                .HasColumnName("Latitude");

                            b1.Property<decimal?>("Longitude")
                                .HasPrecision(18, 7)
                                .HasColumnType("decimal(18,7)")
                                .HasColumnName("Longitude");

                            b1.HasKey("AddressId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.Navigation("Coordinate");
                });

            modelBuilder.Entity("EFCore.Data_models.Order", b =>
                {
                    b.HasOne("EFCore.Data_models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("EFCore.Data_models.Payment", "Payment")
                        .WithOne("Order")
                        .HasForeignKey("EFCore.Data_models.Order", "PaymentId");

                    b.HasOne("EFCore.Data_models.Product", "Product")
                        .WithMany("Order")
                        .HasForeignKey("ProductId");

                    b.HasOne("EFCore.Data_models.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId");

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("EFCore.Data_models.Person", b =>
                {
                    b.HasOne("EFCore.Data_models.Address", "Address")
                        .WithOne("Person")
                        .HasForeignKey("EFCore.Data_models.Person", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("EFCore.Data_models.Product_Amount", b =>
                {
                    b.HasOne("EFCore.Data_models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Data_models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("EFCore.Data_models.Product_Tag", b =>
                {
                    b.HasOne("EFCore.Data_models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Data_models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EFCore.Data_models.Review", b =>
                {
                    b.HasOne("EFCore.Data_models.Employee", "Employee")
                        .WithMany("Reviews")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("EFCore.Data_models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");

                    b.Navigation("Employee");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFCore.Data_models.Salary_Transfer", b =>
                {
                    b.HasOne("EFCore.Data_models.Salary", "Salary")
                        .WithMany("SalaryTransfer")
                        .HasForeignKey("SalaryId");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("EFCore.Data_models.Shop", b =>
                {
                    b.HasOne("EFCore.Data_models.Address", "Address")
                        .WithOne("Shop")
                        .HasForeignKey("EFCore.Data_models.Shop", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("EFCore.Data_models.User", b =>
                {
                    b.HasOne("EFCore.Data_models.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("EFCore.Data_models.User", "PersonId");

                    b.HasOne("EFCore.Data_models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EFCore.Data_models.Customer", b =>
                {
                    b.HasOne("EFCore.Data_models.Employee", null)
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("EFCore.Data_models.Person", null)
                        .WithOne()
                        .HasForeignKey("EFCore.Data_models.Customer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Data_models.Employee", b =>
                {
                    b.HasOne("EFCore.Data_models.Person", null)
                        .WithOne()
                        .HasForeignKey("EFCore.Data_models.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EFCore.Data_models.Employee", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId");

                    b.HasOne("EFCore.Data_models.Salary", "Salary")
                        .WithOne("Employee")
                        .HasForeignKey("EFCore.Data_models.Employee", "SalaryId");

                    b.HasOne("EFCore.Data_models.Shop", "Shop")
                        .WithMany("Employees")
                        .HasForeignKey("ShopId");

                    b.Navigation("Manager");

                    b.Navigation("Salary");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("EFCore.Data_models.Project", b =>
                {
                    b.HasOne("EFCore.Data_models.Employee", "ProjectLeader")
                        .WithOne("Project")
                        .HasForeignKey("EFCore.Data_models.Project", "ProjectLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectLeader");
                });

            modelBuilder.Entity("EFCore.Data_models.WorkTask", b =>
                {
                    b.HasOne("EFCore.Data_models.Employee", "Employee")
                        .WithOne("CurrentTask")
                        .HasForeignKey("EFCore.Data_models.WorkTask", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EFCore.Data_models.Address", b =>
                {
                    b.Navigation("Person");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("EFCore.Data_models.Payment", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("EFCore.Data_models.Person", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCore.Data_models.Product", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("EFCore.Data_models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EFCore.Data_models.Salary", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("SalaryTransfer");
                });

            modelBuilder.Entity("EFCore.Data_models.Shop", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EFCore.Data_models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EFCore.Data_models.Employee", b =>
                {
                    b.Navigation("CurrentTask");

                    b.Navigation("Customers");

                    b.Navigation("Project");

                    b.Navigation("Reviews");

                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
